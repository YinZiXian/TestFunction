特性：
1. 每个节点都是红色或黑色
2. 根节点和空叶子节点是黑色
3. 没有两个相邻的红色节点（红色节点不能有红色父节点或红色子节点，并没有说不能出现连续的黑色节点）
4. 从节点（包括根）到其任何后代NULL节点(叶子结点下方挂的两个空节点，并且认为他们是黑色的)的每条路径都具有相同数量的黑色节点

定理：一棵含有n个节点的红黑树的高度最多2log（n+1）

应用：存储有序的数据，时间复杂度是O（log n）。
          Java的TreeSet，TreeMap，HashMap链表长度超过8，C++STL的set，map，Linux的虚拟内存管理。

操作：
1. recolor（重新标记成黑色或红色）
2. rotation（旋转，树达到平衡的关键）

